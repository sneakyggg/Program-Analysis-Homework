digraph "FuncB_cfg"{
	label="FuncB_cfg";


	// Define the nodes
	N1 [shape=rectangle, color=black,label="[1]FuncB"];
	N2 [shape=rectangle, color=black,label="[2]exit"];
	N3 [shape=rectangle, color=black,label="[3]  %2 = alloca i8"];
	N4 [shape=rectangle, color=black,label="[4]  %3 = alloca i32"];
	N5 [shape=rectangle, color=black,label="[5]  %4 = alloca i32"];
	N6 [shape=rectangle, color=black,label="[6]  store i8 %0, i8* %2"];
	N7 [shape=rectangle, color=black,label="[7]  %5 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))"];
	N8 [shape=rectangle, color=black,label="[8]  store i32 0, i32* %3"];
	N9 [shape=rectangle, color=black,label="[9]  %6 = load i8, i8* %2"];
	N10 [shape=rectangle, color=black,label="[10]  %7 = zext i8 %6 to i32"];
	N11 [shape=rectangle, color=black,label="[11]  %8 = load i8, i8* %2"];
	N12 [shape=rectangle, color=black,label="[12]  %9 = zext i8 %8 to i32"];
	N13 [shape=rectangle, color=black,label="[13]  %10 = mul nsw i32 %7, %9"];
	N14 [shape=rectangle, color=black,label="[14]  %11 = load i8, i8* %2"];
	N15 [shape=rectangle, color=black,label="[15]  %12 = zext i8 %11 to i32"];
	N16 [shape=rectangle, color=black,label="[16]  %13 = mul nsw i32 5, %12"];
	N17 [shape=rectangle, color=black,label="[17]  %14 = add nsw i32 %10, %13"];
	N18 [shape=rectangle, color=black,label="[18]  %15 = sub nsw i32 %14, 100"];
	N19 [shape=rectangle, color=black,label="[19]  store i32 %15, i32* %4"];
	N20 [shape=rectangle, color=black,label="[20]  %16 = load i32, i32* %4"];
	N21 [shape=rectangle, color=black,label="[21]  switch i32 %16, label %21 [
    i32 0, label %17
    i32 65535, label %18
    i32 999999, label %19
  ]"];
	N22 [shape=rectangle, color=black,label="[22]  %22 = call i32 @Getpasswd(i8 noundef zeroext 4)"];
	N23 [shape=rectangle, color=black,label="[23]  store i32 %22, i32* %3"];
	N24 [shape=rectangle, color=black,label="[24]  %23 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))"];
	N25 [shape=rectangle, color=black,label="[25]  call void @exit(i32 noundef 0) #6"];
	N26 [shape=rectangle, color=black,label="[26]  unreachable"];
	N27 [shape=rectangle, color=black,label="[27]  store i32 0, i32* %3"];
	N28 [shape=rectangle, color=black,label="[28]  br label %24"];
	N29 [shape=rectangle, color=black,label="[29]  store i32 2, i32* %3"];
	N30 [shape=rectangle, color=black,label="[30]  br label %24"];
	N31 [shape=rectangle, color=black,label="[31]  %20 = call i32 @Getpasswd(i8 noundef zeroext 4)"];
	N32 [shape=rectangle, color=black,label="[32]  store i32 %20, i32* %3"];
	N33 [shape=rectangle, color=black,label="[33]  br label %24"];
	N34 [shape=rectangle, color=black,label="[34]  %25 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))"];
	N35 [shape=rectangle, color=black,label="[35]  %26 = load i32, i32* %3"];
	N36 [shape=rectangle, color=black,label="[36]  ret i32 %26"];


	// Define the edges
	N1 -> N3[color=black,label=""];
	N3 -> N4[color=black,label=""];
	N4 -> N5[color=black,label=""];
	N5 -> N6[color=black,label=""];
	N6 -> N7[color=black,label=""];
	N7 -> N8[color=black,label=""];
	N8 -> N9[color=black,label=""];
	N9 -> N10[color=black,label=""];
	N10 -> N11[color=black,label=""];
	N11 -> N12[color=black,label=""];
	N12 -> N13[color=black,label=""];
	N13 -> N14[color=black,label=""];
	N14 -> N15[color=black,label=""];
	N15 -> N16[color=black,label=""];
	N16 -> N17[color=black,label=""];
	N17 -> N18[color=black,label=""];
	N18 -> N19[color=black,label=""];
	N19 -> N20[color=black,label=""];
	N20 -> N21[color=black,label=""];
	N21 -> N22[color=black,label=""];
	N21 -> N27[color=black,label=""];
	N21 -> N29[color=black,label=""];
	N21 -> N31[color=black,label=""];
	N22 -> N23[color=black,label=""];
	N23 -> N24[color=black,label=""];
	N24 -> N25[color=black,label=""];
	N25 -> N26[color=black,label=""];
	N26 -> N2[color=black,label=""];
	N27 -> N28[color=black,label=""];
	N28 -> N34[color=black,label=""];
	N29 -> N30[color=black,label=""];
	N30 -> N34[color=black,label=""];
	N31 -> N32[color=black,label=""];
	N32 -> N33[color=black,label=""];
	N33 -> N34[color=black,label=""];
	N34 -> N35[color=black,label=""];
	N35 -> N36[color=black,label=""];
	N36 -> N2[color=black,label=""];
}
